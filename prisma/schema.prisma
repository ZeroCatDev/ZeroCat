generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ow_comment {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int?
  type       String?   @default("comment") @db.VarChar(64)
  text       String?   @db.MediumText
  insertedAt DateTime? @default(now()) @db.Timestamp(0)
  user_ip    String?   @default("") @db.VarChar(100)
  link       String?   @db.VarChar(128)
  pid        Int?
  rid        Int?
  status     String    @default("") @db.VarChar(50)
  user_ua    String?   @db.MediumText
  url        String?   @db.VarChar(255)
  page_type  String?   @db.VarChar(32)
  page_id    String?   @db.VarChar(32)
  createdAt  DateTime? @default(now()) @db.Timestamp(0)
  updatedAt  DateTime? @default(now()) @db.Timestamp(0)
  page_key   String?   @db.VarChar(128)

  @@index([page_type, page_id, insertedAt], map: "idx_projects_comments")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ow_projects {
  id             Int       @id @default(autoincrement()) @db.UnsignedInt
  name           String    @db.VarChar(128)
  default_branch String?   @db.VarChar(128)
  type           String?   @default("text") @db.VarChar(32)
  license        String?   @db.VarChar(32)
  authorid       Int
  teacherid      Int?      @default(0) @db.UnsignedInt
  state          String?   @default("private") @db.VarChar(32)
  view_count     Int?      @default(0) @db.UnsignedInt
  like_count     Int?      @default(0)
  favo_count     Int?      @default(0)
  time           DateTime? @default(now()) @db.Timestamp(0)
  title          String?   @default("Scratch新项目") @db.VarChar(1000)
  description    String?   @default("OurWorld上的Scratch项目") @db.VarChar(1000)
  history        Boolean   @default(true)
  devenv         Boolean   @default(true)
  tags           String    @default("") @db.VarChar(100)
  fork           Int?
  star_count     Int?      @default(0)

  @@index([state], map: "idx_projects_state")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ow_users {
  id           Int              @unique(map: "id_UNIQUE") @default(autoincrement())
  username     String           @unique(map: "user_UNIQUE") @db.Char(20)
  email        String?          @db.Char(100)
  password     String?          @db.VarChar(255)
  display_name String           @default("OurWorld创作者") @db.Char(20)
  /// User account status: pending = newly registered, active = normal user, suspended = temporarily disabled, banned = permanently disabled
  status       String           @default("active") @db.VarChar(20)
  loginTime    DateTime?        @db.Timestamp(0)
  regTime      DateTime?        @default(now()) @db.Timestamp(0)
  sex          String?          @default("0") @db.VarChar(16)
  birthday     DateTime?        @default(dbgenerated("'2000-03-31 16:00:00'")) @db.Timestamp(0)
  motto        String?          @db.LongText
  images       String?          @default("fcd939e653195bb6d057e8c2519f5cc7") @db.VarChar(255)
  avatar       String?          @default("https://owcdn.190823.xyz/user/fcd939e653195bb6d057e8c2519f5cc7") @db.VarChar(255)
  type         String?          @default("guest") @db.VarChar(50)
  url          String?          @db.VarChar(255)
  github       String?          @db.VarChar(255)
  twitter      String?          @db.VarChar(255)
  facebook     String?          @db.VarChar(255)
  google       String?          @db.VarChar(255)
  weibo        String?          @db.VarChar(255)
  qq           String?          @db.VarChar(255)
  fa           String?          @map("2fa") @db.VarChar(255)
  createdAt    DateTime?        @default(dbgenerated("'2000-03-31 16:00:00'")) @db.Timestamp(0)
  updatedAt    DateTime?        @default(dbgenerated("'2000-03-31 16:00:00'")) @db.Timestamp(0)
  label        String?          @db.VarChar(255)
  auth_tokens  ow_auth_tokens[]

  @@id([id, username])
}

model ow_projects_file {
  sha256        String    @id @db.VarChar(64)
  source        String?   @db.MediumText
  create_time   DateTime? @default(now()) @db.DateTime(0)
  create_userid Int?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ow_projects_history {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  authorid    Int      @db.UnsignedInt
  projectid   Int      @db.UnsignedInt
  type        String?  @default("text") @db.VarChar(32)
  time        DateTime @default(now()) @db.Timestamp(0)
  title       String?  @default("ZeroCat新项目") @db.VarChar(50)
  description String?  @default("commit") @db.VarChar(1000)
  source      String?  @db.MediumText
  state       String?  @default("private") @db.VarChar(32)
  licence     String?  @db.VarChar(45)
  tags        String?  @db.VarChar(100)
}

model ow_config {
  id         Int       @id @default(autoincrement())
  key        String    @unique(map: "config_key") @db.VarChar(255)
  value      String    @db.Text
  user_id    Int?
  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)
  is_public  Boolean?  @default(false)
}

model ow_users_totp {
  id                Int       @id @default(autoincrement())
  name              String    @default("验证器") @db.VarChar(128)
  user_id           Int
  type              String    @default("totp") @db.VarChar(45)
  status            String    @default("unverified") @db.VarChar(32)
  totp_secret       String?   @db.VarChar(255)
  totp_algorithm    String?   @default("SHA256") @db.VarChar(10)
  totp_digits       Int?      @default(6)
  totp_period       Int?      @default(30)
  totp_last_updated DateTime? @db.Timestamp(0)
  created_at        DateTime? @default(now()) @db.Timestamp(0)
  updated_at        DateTime? @default(now()) @db.Timestamp(0)
}

model ow_projects_tags {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(45)
  projectid  Int
  created_at DateTime? @default(now()) @db.Timestamp(0)

  @@index([projectid], map: "idx_projectid")
}

/// Project stars model - improved structure
model ow_projects_stars {
  id         Int       @id @default(autoincrement())
  userid     Int
  projectid  Int
  createTime DateTime? @default(now()) @db.Timestamp(0)

  @@index([projectid], map: "idx_projects_stars_project")
}

/// Project lists model - improved structure
model ow_projects_lists {
  id          Int       @id @default(autoincrement())
  authorid    Int?
  title       String?   @default("收藏夹") @db.VarChar(1024)
  description String?   @default("列表") @db.VarChar(1024)
  state       String?   @default("private") @db.VarChar(32)
  list        String?   @db.MediumText
  updateTime  DateTime? @db.Timestamp(0)
  createTime  DateTime? @default(now()) @db.Timestamp(0)

  @@index([authorid], map: "idx_author_lists")
}

model ow_projects_commits {
  id                 String   @db.VarChar(256)
  project_id         Int
  author_id          Int
  branch             String   @default("main") @db.VarChar(255)
  parent_commit_id   String?  @db.VarChar(256)
  commit_message     String   @db.Text
  commit_date        DateTime @db.DateTime(0)
  commit_file        String   @db.VarChar(256)
  commit_description String?  @db.Text

  @@id([id, project_id])
  @@index([project_id, commit_date], map: "idx_projects_commits_project_date")
}

model ow_users_magiclink {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique(map: "token") @db.VarChar(255)
  expiresAt DateTime @db.DateTime(0)
}

model ow_projects_branch {
  id                 Int     @id @default(autoincrement())
  name               String  @db.VarChar(128)
  latest_commit_hash String  @db.VarChar(64)
  description        String  @db.VarChar(128)
  projectid          Int
  protected          String? @default("false") @db.VarChar(45)
  creator            Int?

  @@unique([projectid, name], map: "unique_project_branch")
}

model ow_users_contacts {
  contact_id    Int                            @id @default(autoincrement())
  user_id       Int
  contact_value String                         @unique(map: "contact_value_UNIQUE") @db.VarChar(255)
  contact_info  String?                        @db.VarChar(255)
  contact_type  ow_users_contacts_contact_type
  is_primary    Boolean?                       @default(false)
  verified      Boolean?                       @default(false)
  created_at    DateTime?                      @default(now()) @db.Timestamp(0)
  updated_at    DateTime?                      @default(now()) @db.Timestamp(0)

  @@unique([user_id, is_primary, contact_type], map: "unique_primary_contact")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ow_events {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  event_type  String   @db.VarChar(50)
  actor_id    BigInt   @db.UnsignedBigInt
  target_type String   @db.VarChar(50)
  target_id   BigInt   @db.UnsignedBigInt
  event_data  Json
  created_at  DateTime @default(now()) @db.Timestamp(0)
  public      Int      @default(0) @db.TinyInt

  @@index([created_at], map: "idx_created")
  @@index([target_type, target_id], map: "idx_target")
  @@index([event_type, actor_id], map: "idx_type_actor")
}

model ow_projects_list_items {
  id         Int       @id @default(autoincrement())
  listid     Int
  projectid  Int
  createTime DateTime? @default(now()) @db.Timestamp(0)

  @@unique([listid, projectid], map: "unique_list_project")
  @@index([listid], map: "idx_list_items")
  @@index([projectid], map: "idx_project_in_lists")
}

model ow_auth_tokens {
  id                 Int       @id @default(autoincrement())
  user_id            Int
  access_token       String    @unique(map: "idx_access_token") @db.VarChar(255)
  refresh_token      String    @unique(map: "idx_refresh_token") @db.VarChar(255)
  expires_at         DateTime  @db.DateTime(0)
  refresh_expires_at DateTime  @db.DateTime(0)
  created_at         DateTime  @default(now()) @db.DateTime(0)
  updated_at         DateTime  @default(now()) @updatedAt @db.DateTime(0)
  last_used_at       DateTime? @db.DateTime(0)
  last_used_ip       String?   @db.VarChar(255)
  activity_count     Int       @default(0)
  extended_at        DateTime? @db.DateTime(0)
  revoked            Boolean   @default(false)
  revoked_at         DateTime? @db.DateTime(0)
  ip_address         String?   @db.VarChar(100)
  user_agent         String?   @db.Text
  device_info        String?   @db.Text
  user               ow_users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_tokens_users")

  @@index([user_id], map: "idx_user_id")
  @@index([last_used_at], map: "idx_tokens_last_used_at")
  @@index([last_used_ip], map: "idx_tokens_last_used_ip")
}

model ow_notifications {
  id                Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id           Int
  notification_type String    @db.VarChar(64)
  read              Boolean   @default(false)
  high_priority     Boolean   @default(false)
  created_at        DateTime  @default(now()) @db.Timestamp(0)
  read_at           DateTime? @db.Timestamp(0)
  actor_id          Int?
  target_type       String?   @db.VarChar(50)
  target_id         Int?
  related_type      String?   @db.VarChar(50)
  related_id        Int?
  data              Json?

  @@index([user_id, read, created_at], map: "idx_user_unread")
  @@index([user_id, created_at], map: "idx_user_all")
}

model ow_user_relationships {
  id                Int                       @id @default(autoincrement())
  source_user_id    Int
  target_user_id    Int
  relationship_type ow_user_relationship_type
  created_at        DateTime                  @default(now()) @db.Timestamp(0)
  updated_at        DateTime?                 @updatedAt @db.Timestamp(0)
  metadata          Json?

  @@unique([source_user_id, target_user_id, relationship_type], name: "unique_user_relationship")
  @@index([source_user_id, relationship_type], map: "idx_source_user_relationships")
  @@index([target_user_id, relationship_type], map: "idx_target_user_relationships")
}

enum ow_users_contacts_contact_type {
  email
  phone
  qq
  other
  oauth_google
  oauth_github
  oauth_microsoft
}

enum ow_user_relationship_type {
  follow
  block
  mute
  favorite
}

view ow_projects_search_view {
  id                 Int       @unique @db.UnsignedInt
  name               String    @db.VarChar(128)
  title              String?   @db.VarChar(1000)
  description        String?   @db.VarChar(1000)
  authorid           Int
  state              String?   @db.VarChar(32)
  type               String?   @db.VarChar(32)
  license            String?   @db.VarChar(32)
  view_count         Int?      @db.UnsignedInt
  like_count         Int?      @default(0)
  favo_count         Int?      @default(0)
  star_count         Int?      @default(0)
  time               DateTime? @db.Timestamp(0)
  tags               String    @db.VarChar(100)
  author_display_name String?  @db.Char(20)
  author_username    String?   @db.Char(20)
  author_motto        String?   @db.LongText
  author_images      String?   @db.VarChar(255)
  author_type        String?   @db.VarChar(50)
  latest_source      String?   @db.MediumText
  comment_count      Int?      @default(0)
  latest_comment     String?   @db.MediumText
  recent_comments    String?   @db.Text
  recent_commits     Json?
  branches           Json?

  @@map("ow_projects_search")
}
