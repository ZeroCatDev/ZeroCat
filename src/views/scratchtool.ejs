var htmlElement = document.getElementsByTagName("html")[0];

// Configuration management
const ZCConfig = {
  frontend: {
    url: "<%= global.config['urls.frontend'] %>",
    getPath: function (path) {
      return `${this.url}${path}`;
    },
  },
  api: {
    url: "<%= global.config['urls.backend'] %>",
    getPath: function (path) {
      return `${this.url}${path}`;
    },
  },
  s3: {
    staticUrl: "<%= global.config['s3.staticurl'] %>",
  },
};

// --- Refactored Application Management & Resource Loading ---
const App = {
  initialize: async function () {
    try {
      loadStyle(ZCConfig.frontend.getPath("/scratchtool/mdui.css"));
      await this.loadScript(ZCConfig.frontend.getPath("/scratchtool/jquery.3.7.1.js"));
      await this.loadScript(ZCConfig.frontend.getPath("/scratchtool/mdui.global.js"));

      $(document).ready(() => {
        initUIComponents();
        initialize(); // This is the main application logic initialization
      });
    } catch (error) {
      console.error("Application initialization failed:", error);
      alert(`应用初始化失败: ${error.message}`);
    }
  },

  loadScript: (src) => {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = src;
      script.onload = () => resolve();
      script.onerror = () => reject(new Error(`Script load error for ${src}`));
      document.head.appendChild(script);
    });
  },
};

const loadStyle = (href) => {
  const link = document.createElement("link");
  link.rel = "stylesheet";
  link.href = href;
  document.head.appendChild(link);
};

window.onload = () => {
  App.initialize();
};


// 将依赖mdui的UI操作封装到这个函数中
function initUIComponents() {
  htmlElement.classList.add("mdui-theme-dark");
  mdui.setColorScheme("#2087fd");
  window.UIManager = {
    showSnackbar: function (message) {
      mdui.snackbar({ message, closeable: true });
    },
    showAlert: function (options) {
      mdui.alert(options);
    },
  };
}

// 令牌管理工具
const TokenManager = {
  // ... (keeping the existing TokenManager as it's already using async/await)
  // Stays the same
  refreshToken: null,

  // 从JWT中获取过期时间
  getTokenExpiration: function (token) {
    try {
      const decoded = jwtDecode(token);
      return decoded.exp ? decoded.exp * 1000 : null; // 转换为毫秒
    } catch (error) {
      console.error("Token expiration parsing error:", error);
      return null;
    }
  },

  // 判断令牌是否即将过期 (提前5分钟刷新)
  isTokenExpiringSoon: function (token) {
    const expTime = this.getTokenExpiration(token);
    if (!expTime) return true;

    // 提前5分钟刷新令牌
    return Date.now() > expTime - 5 * 60 * 1000;
  },

  // 获取当前令牌
  getToken: function () {
    return localStorage.getItem("token");
  },

  // 获取刷新令牌
  getRefreshToken: function () {
    return localStorage.getItem("refreshToken");
  },

  // 保存令牌信息
  saveTokens: function (accessToken, refreshToken, expiresAt) {
    localStorage.setItem("token", accessToken);
    if (refreshToken) {
      localStorage.setItem("refreshToken", refreshToken);
    }
    if (expiresAt) {
      localStorage.setItem("tokenExpiresAt", expiresAt.getTime().toString());
    }
  },

  // 刷新访问令牌
  refreshAccessToken: async function () {
    const refreshToken = this.getRefreshToken();
    if (!refreshToken) {
      return {
        success: false,
        message: "刷新令牌不存在",
      };
    }

    try {
      const response = await $.ajax({
        url: ZCConfig.api.getPath("/account/refresh-token"),
        type: "POST",
        data: { refresh_token: refreshToken },
        dataType: "json",
      });

      if (response.status === "success") {
        // 保存新令牌
        this.saveTokens(response.token, null, new Date(response.expires_at));
        return {
          success: true,
          token: response.token,
        };
      } else {
        return {
          success: false,
          message: response.message,
        };
      }
    } catch (error) {
      console.error("Token refresh error:", error);
      if (error.status === 401) {
        // 处理刷新令牌过期
        localStorage.removeItem("token");
        localStorage.removeItem("refreshToken");
        localStorage.removeItem("tokenExpiresAt");
        return {
          success: false,
          message: "登录已过期，请重新登录",
          code: "AUTH_ERROR_LOGIN",
        };
      }
      return {
        success: false,
        message: "刷新令牌出错",
      };
    }
  },

  // 检查并确保令牌有效，必要时刷新
  ensureValidToken: async function () {
    const token = this.getToken();
    if (!token) {
      return {
        success: false,
        message: "未登录 #1",
      };
    }

    if (this.isTokenExpiringSoon(token)) {
      // 令牌即将过期，尝试刷新
      const refreshResult = await this.refreshAccessToken();
      if (!refreshResult.success) {
        if (refreshResult.code === "AUTH_ERROR_LOGIN") {
          handleInvalidLogin(refreshResult.message);
        }
        return refreshResult;
      }
      return {
        success: true,
        token: refreshResult.token,
      };
    }

    return {
      success: true,
      token: token,
    };
  },

  // 执行带有令牌验证的API请求
  apiRequest: async function (options) {
    // 确保令牌有效
    const tokenResult = await this.ensureValidToken();

    if (!tokenResult.success) {
      // 如果是登录问题，则处理登录
      if (tokenResult.code === "AUTH_ERROR_LOGIN") {
        handleInvalidLogin(tokenResult.message);
      }

      // 返回Promise失败
      return Promise.reject({
        status: 401,
        responseJSON: {
          status: "error",
          message: tokenResult.message,
          code: tokenResult.code || "AUTH_ERROR",
        },
      });
    }

    // 设置Authorization头
    const headers = options.headers || {};
    headers.Authorization = `Bearer ${tokenResult.token}`;

    // 设置请求选项
    const requestOptions = {
      ...options,
      headers,
    };

    try {
      return await $.ajax(requestOptions);
    } catch (error) {
      if (
        error.responseJSON &&
        error.responseJSON.code === "AUTH_ERROR_LOGIN"
      ) {
        handleInvalidLogin(error.responseJSON.message);
      }
      throw error;
    }
  },
};


// Description: ZeroCat Scratch Tool
let zcvm, zcgui;
let _pid = 0;
let logText,
  zctab,
  userinfo = {},
  projectjson = "null",
  projectinfo = {};
let commitInfo = {};
let commituser = {};
let authorinfocard = {};
let authorinfoavatar = {};

const buttons = [
  { id: "open-zerocat-tab", text: "信息", onclick: () => updateZerocatTab() },
  { id: "save-button", text: "保存", onclick: () => openCommitDialog() },
];

function getQueryStringParameter(name) {
  return new URL(window.location.href).searchParams.get(name);
}

function getCurrentTime() {
  const now = new Date();
  return `${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;
}

// 封装showSnackbar函数，确保mdui已加载
function showSnackbar(text) {
  if (window.UIManager) {
    UIManager.showSnackbar(text);
  } else {
    // 如果mdui未加载，使用console.log作为备选
    console.log(text);
  }
}

// JWT 解析函数
function jwtDecode(token) {
  function b64DecodeUnicode(str) {
    return decodeURIComponent(
      atob(str).replace(/(.)/g, (m, p) => {
        let code = p.charCodeAt(0).toString(16).toUpperCase();
        if (code.length < 2) {
          code = "0" + code;
        }
        return "%" + code;
      })
    );
  }

  function base64UrlDecode(str) {
    let output = str.replace(/-/g, "+").replace(/_/g, "/");
    switch (output.length % 4) {
      case 0:
        break;
      case 2:
        output += "==";
        break;
      case 3:
        output += "=";
        break;
      default:
        throw new Error("base64 string is not of the correct length");
    }
    try {
      return b64DecodeUnicode(output);
    } catch (err) {
      return atob(output);
    }
  }

  if (typeof token !== "string") {
    throw new Error("Invalid token specified: must be a string");
  }

  const part = token.split(".")[1];
  if (typeof part !== "string") {
    throw new Error(`Invalid token specified: missing part #2`);
  }

  let decoded;
  try {
    decoded = base64UrlDecode(part);
  } catch (e) {
    throw new Error(
      `Invalid token specified: invalid base64 for part #2 (${e.message})`
    );
  }

  try {
    return JSON.parse(decoded);
  } catch (e) {
    throw new Error(
      `Invalid token specified: invalid json for part #2 (${e.message})`
    );
  }
}

function handleInvalidLogin(message) {
  //localStorage.removeItem("token");
  //localStorage.removeItem("refreshToken");
  //localStorage.removeItem("tokenExpiresAt");

  if (window.UIManager) {
    UIManager.showAlert({
      headline: "登录问题",
      description: message,
      confirmText: "打开用户页面",
      cancelText: "取消",
      onConfirm: () => {
        // 在新标签页打开登录页面
        const returnUrl = encodeURIComponent(window.location.href);
        window.open(
          `${ZCConfig.frontend.getPath(
            "/app/account/login"
          )}?return_url=${returnUrl}`,
          "_blank"
        );
      },
    });
  } else {
    // mdui未加载时的备选方案
    if (confirm(`登录问题: ${message}
是否打开登录页面?`)) {
      const returnUrl = encodeURIComponent(window.location.href);
      window.open(
        `${ZCConfig.frontend.getPath(
          "/app/account/login"
        )}?return_url=${returnUrl}`,
        "_blank"
      );
    }
  }

  showLoginButton();
}

// 定义一个函数用于加载用户信息
function loadUserInfo() {
  // 从localStorage中获取名为"token"的项
  const token = localStorage.getItem("token");
  const refreshToken = localStorage.getItem("refreshToken");

  // 检查token是否存在
  if (token) {
    try {
      // 使用jwtDecode函数解码token
      const decoded = jwtDecode(token);
      // 获取当前时间的时间戳（秒）
      const currentTime = Math.floor(Date.now() / 1000);

      // 如果令牌即将过期但有刷新令牌，则不做处理
      // TokenManager.ensureValidToken 会在后续API请求中处理刷新

      // 如果令牌已过期且没有刷新令牌
      if (decoded.exp && decoded.exp < currentTime && !refreshToken) {
        // 如果token已过期，调用handleInvalidLogin函数处理
        handleInvalidLogin("登录已过期，请重新登录。");
      } else {
        // 如果token未过期，将解码后的用户信息赋值给userinfo变量
        userinfo = decoded;
        // 将用户ID存储到localStorage中，键名为"zc:id"
        localStorage.setItem("zc:id", String(decoded.userid));
        // 将用户名存储到localStorage中，键名为"zc:username"
        localStorage.setItem("zc:username", decoded.display_name);
      }
    } catch (error) {
      // 如果解码过程中发生错误，并且没有刷新令牌
      if (!refreshToken) {
        // 调用handleInvalidLogin函数处理
        handleInvalidLogin("登录信息无效，请重新登录。");
      } else {
        // 有刷新令牌，后续API请求会尝试刷新
        console.log("Token parsing error, will attempt to refresh");
      }
    }
  } else {
    // 如果token不存在，显示登录按钮
    if (!isEmbed) showLoginButton();
  }
}

function showLoginButton() {
  buttons.length = 0; // 清空按钮数组
  buttons.push({
    id: "login-button",
    text: "登录/注册",
    onclick: () => {
      // 添加当前URL作为return_url参数
      const returnUrl = encodeURIComponent(window.location.href);
      window.open(
        `${ZCConfig.frontend.getPath(
          "/app/account/login"
        )}?return_url=${returnUrl}`,
        "_blank"
      );
    },
  });
  renderButtons();
}

function renderButtons() {
  const zerocattool = document.getElementById("zerocattool");
  if (!zerocattool) return; // 确保元素存在

  zerocattool.innerHTML = ""; // 清空现有按钮
  buttons.forEach((button) => {
    const btnTemplate = zerocattool.cloneNode(true);
    btnTemplate.id = button.id;
    btnTemplate.innerHTML = button.text;
    if (button.onclick) btnTemplate.onclick = button.onclick;
    btnTemplate.style.display = "inline-block";
    zerocattool.parentNode.appendChild(btnTemplate);
  });
  zerocattool.style.display = "none";
}
window.renderButtons = renderButtons;

function setButton(id, text, onclick) {
  const button = document.getElementById(id);
  if (button) {
    button.innerText = text;
    button.onclick = onclick;
  }
}

// --- Refactored uploadProjectAssets ---
async function uploadProjectAssets() {
  try {
    const allAssetIds = zcvm.assets.map((asset) => asset.assetId);

    const checkResult = await TokenManager.apiRequest({
      url: `${ZCConfig.api.getPath("/assets/scratch/check")}`,
      type: "POST",
      dataType: "json",
      contentType: "application/json",
      data: JSON.stringify({ files: allAssetIds }),
    });

    const uploadedFiles = checkResult.data;
    const toUploadFiles = zcvm.assets.filter(
      (asset) => !uploadedFiles.includes(asset.assetId)
    );

    logText.innerText += `[${getCurrentTime()}] 需要上传 ${toUploadFiles.length} 个文件。
`;

    for (const asset of toUploadFiles) {
      try {
        const formData = new FormData();
        formData.append(
          "file",
          new Blob([asset.data], { type: asset.assetType.contentType }),
          `${asset.assetId}.${asset.dataFormat}`
        );

        await TokenManager.apiRequest({
          url: `${ZCConfig.api.getPath("/scratch/assets/" + asset.assetId + "." + asset.dataFormat)}`,
          type: "POST",
          data: formData,
          processData: false,
          contentType: false,
        });

        logText.innerText += `[${getCurrentTime()}] 文件上传成功: ${asset.assetId}.${asset.dataFormat}
`;
        asset.clean = true;
      } catch (error) {
        logText.innerText += `[${getCurrentTime()}] 文件上传失败: ${asset.assetId}.${asset.dataFormat}
Error: ${error.responseJSON?.message || error.statusText}
`;
      }
    }
    showSnackbar("媒体库保存完成");
  } catch (error) {
    console.error("Error checking or uploading assets:", error);
    showErrorAlert("媒体库保存失败", `错误: ${error.responseJSON?.message || error.statusText}`);
  }
}

// --- Refactored fetchProjectInfo ---
async function fetchProjectInfo() {
  if (_pid === 0 || !Number.isInteger(_pid)) return;

  updateLoadingDescription("正在获取项目详细信息...");
  try {
    const result = await TokenManager.apiRequest({
      url: `${ZCConfig.api.getPath("/scratch/projectinfo2")}?id=${_pid}`,
      type: "GET",
    });

    if (result.status == "404") {
      location.href = `${ZCConfig.frontend.getPath("/editor.html")}?msg=404`;
      return;
    }

    projectinfo = result;
    if (!isEmbed) {
      authorinfocard.headline = result.author.username;
      authorinfocard.description = result.author.description;
      authorinfocard.onclick = () => window.open(`${ZCConfig.frontend.getPath("/user/")}${result.author.id}`);
      authorinfocard.style.cursor = "pointer";
      authorinfoavatar.src = `${ZCConfig.s3.staticUrl}/user/${result.author.profile.id}`;
      zctab.headline = `${result.title} #${result.id}`;
      zctab.description = `${
        String(result.author.id) === String(userinfo.userid)
          ? "是你的作品"
          : "不是你的作品"
      }`;

      if (String(result.author.id) !== String(userinfo.userid)) {
        setButton("push-button", "改编", () => window.open(`${ZCConfig.frontend.getPath("/projects/")}${_pid}/fork`));
      }
    }
  } catch (error) {
    console.error("Error fetching project info:", error);
    showErrorAlert("获取项目信息失败", `错误: ${error.responseJSON?.message || error.statusText}`);
  }
}


function updateZerocatTab() {
  if (zctab) {
    zctab.open = true;
  }
}

// --- Refactored getZerocatUserInfo ---
async function getZerocatUserInfo(userid) {
  try {
    const result = await $.ajax({
      url: `${ZCConfig.api.getPath("/user/id/")}${userid}`,
      type: "GET",
    });
    return result.data;
  } catch (error) {
    const data = error.responseJSON;
    if (data && data.code === "AUTH_ERROR_LOGIN") {
      handleInvalidLogin(data.message);
    } else {
      console.error(`Failed to get user info for ${userid}:`, error);
      showErrorAlert("获取用户信息失败", `无法加载用户 ${userid} 的信息。`);
    }
    return null; // Return null on failure
  }
}


// 在initialize函数开始处添加检查URL参数中是否有token信息
function checkUrlForTokens() {
  const urlParams = new URLSearchParams(window.location.search);
  const token = urlParams.get("token");
  const refreshToken = urlParams.get("refreshToken");
  const expiresAt = urlParams.get("expires_at");

  if (token) {
    // 保存从URL获取的token
    TokenManager.saveTokens(
      token,
      refreshToken,
      expiresAt ? new Date(parseInt(expiresAt, 10)) : null
    );

    // 清除URL中的token参数
    const url = new URL(window.location.href);
    url.searchParams.delete("token");
    url.searchParams.delete("refreshToken");
    url.searchParams.delete("expires_at");
    window.history.replaceState({}, "", url);

    // 重新加载用户信息
    loadUserInfo();
    return true;
  }

  return false;
}

let isEmbed;
function initialize() {
  if (window.initialized) return; // 避免初始化两次
  window.initialized = true;

  // 检查URL中是否有token信息
  const tokenFromUrl = checkUrlForTokens();

  const urlParams = new URLSearchParams(window.location.search);
  isEmbed = urlParams.get("embed") === "true";

  if (!isEmbed) {
    try {
      const zerocatTabHTML = `
<mdui-dialog headline="作品" description="加载中" close-on-overlay-click id="zerocat-tab">
    <mdui-list>
        <mdui-list-subheader>作者</mdui-list-subheader>
        <mdui-list-item headline="作者信息" description="加载中" id="author-info" active rounded>
            <mdui-avatar slot="icon" src="" id="author-avatar"></mdui-avatar>
        </mdui-list-item>
        <mdui-list-subheader>当前提交</mdui-list-subheader>
        <mdui-list-item headline="提交信息" description="Supporting text" id="commit-info" rounded>
            <mdui-avatar slot="icon" src="" id="commit-avatar"></mdui-avatar>
        </mdui-list-item>
    </mdui-list>
    <br/>
    <mdui-button id="savestatic" onclick="uploadProjectAssets()">保存媒体库</mdui-button>
    <mdui-button onclick="openCommitDialog()">保存作品</mdui-button>
    <mdui-button onclick="logText.innerText = ''">清空log</mdui-button>
    <div id="log-text"></div>
</mdui-dialog>
`;
      document.body.insertAdjacentHTML("beforeend", zerocatTabHTML);

      // 添加HTML创建提示框
      document.body.insertAdjacentHTML(
        "beforeend",
        `
<mdui-dialog
        headline="加载中"
        description="正在加载作品，请稍候..."
        close-on-overlay-click
        class="loading-dialog"
></mdui-dialog>
<mdui-dialog headline="提交作品" description="请输入提交信息" close-on-overlay-click id="commit-dialog">
    <mdui-text-field variant="outlined" label="提交信息" value="Update Project" id="commit-message"></mdui-text-field>
    <mdui-text-field variant="outlined" label="更多信息" rows id="commit-description"></mdui-text-field>
    <mdui-radio-group value="main">
        <mdui-radio value="main">提交给当前分支</mdui-radio>
        <mdui-radio value="pr">为此提交创建一个新分支</mdui-radio>
    </mdui-radio-group>
    <mdui-text-field variant="outlined" label="分支名称" value="main" id="branch-name"></mdui-text-field>
    <mdui-button onclick="commitProject()">提交</mdui-button>
</mdui-dialog>
`
      );

      zctab = document.querySelector("#zerocat-tab");
      authorinfocard = document.querySelector("#author-info");
      authorinfoavatar = document.querySelector("#author-avatar");
      logText = document.querySelector("#log-text");

      renderButtons();
    } catch (error) {
      console.error("Error initializing non-embed mode:", error);
    }
  } else {
    document.body.insertAdjacentHTML(
      "beforeend",
      `
<mdui-dialog
        headline="加载中"
        description="正在加载作品，请稍候..."
        close-on-overlay-click
        class="loading-dialog"
        open
></mdui-dialog>
`
    );
  }

  const loadingDialog = document.querySelector(".loading-dialog");

  if (typeof ClipCCExtension !== "undefined") {
    zcvm = ClipCCExtension.api.getVmInstance();
    zcgui = ClipCCExtension.api.getGuiInstance();
  } else if (typeof window.vm !== "undefined") {
    zcvm = window.vm;
    zcgui = window.gui;
  } else {
    setTimeout(initialize, 100);
    return;
  }

  const msg = getQueryStringParameter("msg");
  if (msg) {
    if (msg == "404") alert("作品不存在");
    if (msg == "401") alert("未登录");
  }

  loadUserInfo();
  loadProject();
}

function zctabopen() {
  updateZerocatTab();
}

let isLoading = false;

// 更新loading对话框描述的函数
function updateLoadingDescription(description) {
  const loadingDialog = document.querySelector(".loading-dialog");
  if (loadingDialog) {
    loadingDialog.description = description;
  }
}

async function loadProject() {
  if (isLoading) return;
  isLoading = true;

  console.log("Loading project...");
  updateLoadingDescription("正在初始化项目加载...");

  const queryId = getQueryStringParameter("id");
  if (queryId) {
    _pid = Number(queryId);
    console.log(`Project ID from query: ${_pid}`);
  }
  if (_pid === 0) {
    console.log("No project ID found, redirecting to new project page.");
    //window.location.href = `${CONFIG.API_HOST}/newproject`;
    isLoading = false;
    return;
  }

  console.log(`Fetching project info for ID: ${_pid}`);
  updateLoadingDescription("正在获取项目信息...");
  await fetchProjectInfo();

  if (zcvm) {
    await downloadAndLoadProject(_pid);
  } else {
    updateLoadingDescription("正在等待Scratch引擎初始化...");
    setTimeout(loadProject, 100);
  }
}

// --- Refactored downloadAndLoadProject & helpers ---
async function downloadAndLoadProject(pid) {
  console.log(`Downloading project with ID: ${pid}`);
  updateLoadingDescription("正在连接服务器获取项目数据...");

  const loadingDialog = document.querySelector(".loading-dialog");
  if (loadingDialog) {
    loadingDialog.open = true;
  }

  const branch = getQueryStringParameter("branch") || "main";
  const ref = getQueryStringParameter("ref") || "latest";

  try {
    const response = await TokenManager.apiRequest({
      url: `${ZCConfig.api.getPath("/project/")}${pid}/${branch}/${ref}`,
      type: "GET",
    });

    if (response.status === "error") {
      if (response.commit && response.commit.commit_message === "NoFirstCommit") {
        await handleUninitializedProject(pid);
      } else {
        showErrorAlert("加载失败", response.message, "关闭");
      }
      if (loadingDialog) loadingDialog.open = false;
      isLoading = false;
      return;
    }

    const { commit, accessFileToken } = response;
    commitInfo = commit;
    updateLoadingDescription("正在获取项目文件数据...");
    await updateCommitInfoUI(commit);

    const fileResponse = await TokenManager.apiRequest({
      url: `${ZCConfig.api.getPath("/project/files/")}${commit.commit_file}?content=true`,
      type: "GET",
      data: { accessFileToken },
    });

    updateLoadingDescription("正在解析项目数据...");
    // The response is the file content itself, not a JSON object containing it
    await zcvm.loadProject(JSON.parse(fileResponse));

    console.log("Project loaded into VM successfully.");
    updateLoadingDescription("正在初始化Scratch引擎...");
    setTimeout(() => {
      if (loadingDialog) loadingDialog.open = false;
      zcvm.renderer.draw();
    }, 10);
    zcvm.renderer.draw();
    isLoading = false;

  } catch (error) {
    console.error("Error downloading or loading project:", error);
    if (loadingDialog) loadingDialog.open = false;
    isLoading = false;
    showErrorAlert(
      "加载失败",
      `作品加载失败: ${error.responseJSON?.message || error.statusText}`,
      "重新加载",
      () => window.location.reload()
    );
  }
}

async function handleUninitializedProject(pid) {
    updateLoadingDescription("检测到未初始化的项目，准备初始化...");
    const alertOptions = {
        headline: "作品未初始化",
        description: "你可以以Scratch模板初始化此作品",
        confirmText: "继续",
        onConfirm: async () => {
            updateLoadingDescription("正在初始化项目模板...");
            try {
                const response = await TokenManager.apiRequest({
                    url: `${ZCConfig.api.getPath("/project/edit/")}${pid}/init`,
                    type: "POST",
                });
                showSnackbar(response.message);
                updateLoadingDescription("项目初始化完成，重新加载...");
                await downloadAndLoadProject(pid);
            } catch (error) {
                console.error("Error initializing project:", error);
                showErrorAlert(
                    "初始化失败",
                    `作品初始化失败: ${error.responseJSON?.message || error.statusText}`,
                    "重新加载",
                    () => window.location.reload()
                );
            }
        },
    };

    if (window.UIManager) {
        UIManager.showAlert(alertOptions);
    } else {
        if (confirm(`${alertOptions.headline}: ${alertOptions.description}`)) {
            await alertOptions.onConfirm();
        }
    }
}

async function updateCommitInfoUI(commit) {
    if (isEmbed) return;
    try {
        const commitDate = new Date(commit.commit_date).toLocaleString();
        const commitInfoList = document.getElementById("commit-info");
        if (commitInfoList) {
            commitInfoList.headline = commit.commit_message;
            const commitInfoAvatar = document.getElementById("commit-avatar");
            const commitUser = await getZerocatUserInfo(commit.author_id);
            if (commitInfoAvatar && commitUser && commitUser.images) {
                commitInfoAvatar.src = `${ZCConfig.s3.staticUrl}/${commitUser.images}`;
            }
            if(commitUser) {
                commitInfoList.description = `${commitUser.display_name} 于 ${commitDate}`;
            }
        }
    } catch (error) {
        console.error("Failed to update commit info UI", error);
    }
}


// 通用错误提示函数
function showErrorAlert(headline, description, confirmText, onConfirm) {
  const options = {
    headline,
    description,
    confirmText,
  };

  if (onConfirm) {
    options.onConfirm = onConfirm;
  }

  if (window.UIManager) {
    UIManager.showAlert(options);
  } else {
    if (confirm(`${headline}: ${description}`)) {
      if (onConfirm) onConfirm();
    }
  }
}

function openCommitDialog() {
  const commitDialog = document.getElementById("commit-dialog");
  const branchNameInput = document.getElementById("branch-name");
  if (!commitDialog || !branchNameInput) {
    console.error("提交对话框未初始化");
    showSnackbar("提交对话框未初始化");
    return;
  }

  const branchRadioGroup = document.querySelector("mdui-radio-group");
  if (!branchRadioGroup) {
    console.error("分支选择未初始化");
    showSnackbar("分支选择未初始化");
    return;
  }

  const currentBranch = getQueryStringParameter("branch") || "main";
  branchNameInput.value = currentBranch;
  branchNameInput.disabled = true; // Disable by default

  branchRadioGroup.addEventListener("change", (event) => {
    if (event.target.value === "pr") {
      const username = userinfo.username || 'user';
      const timestamp = Date.now();
      branchNameInput.value = `${username}-patch-${timestamp}`;
      branchNameInput.disabled = false;
    } else {
      branchNameInput.value = currentBranch;
      branchNameInput.disabled = true;
    }
  });

  commitDialog.open = true;
}

// --- Refactored commitProject ---
async function commitProject() {
  const branchNameInput = document.getElementById("branch-name");
  const commitMessageInput = document.getElementById("commit-message");
  const commitDescriptionInput = document.getElementById("commit-description");

  if (!branchNameInput || !commitMessageInput || !commitDescriptionInput) {
    showErrorAlert("错误", "提交表单未完全加载", "关闭");
    return;
  }

  const branchName = branchNameInput.value;
  const commitMessage = commitMessageInput.value;
  const commitDescription = commitDescriptionInput.value;

  if (!commitMessage) {
    showErrorAlert("提交信息不能为空", "请输入提交信息", "关闭");
    return;
  }

  setButton("save-button", "保存中...", () => {});
  const commitDialog = document.getElementById("commit-dialog");
  if(commitDialog) commitDialog.open = false;


  try {
    await uploadProjectAssets();

    if (zcvm.runtime.isRunning) {
      zcvm.runtime.stopAll();
    }

    const currentProjectJson = zcvm.toJSON();
    if (projectjson === currentProjectJson) {
      showSnackbar("作品未修改");
      setButton("save-button", "保存", () => openCommitDialog());
      return;
    }

    if (String(projectinfo.author.id) !== String(userinfo.userid)) {
      showSnackbar("无权限");
      setButton("save-button", "无权限", () => {});
      return;
    }

    projectjson = currentProjectJson;

    const saveResponse = await TokenManager.apiRequest({
      url: `${ZCConfig.api.getPath("/project/savefile")}?json=true`,
      type: "post",
      data: projectjson,
      contentType: "application/json",
    });

    const newAccessFileToken = saveResponse.accessFileToken;

    const commitResponse = await TokenManager.apiRequest({
      url: `${ZCConfig.api.getPath("/project/commit/id/")}${_pid}`,
      type: "put",
      data: JSON.stringify({
        projectid: _pid,
        branch: branchName,
        accessFileToken: newAccessFileToken,
        message: commitMessage,
        commit_description: commitDescription,
      }),
      contentType: "application/json",
    });

    showSnackbar(commitResponse.message);

    setButton("save-button", "保存完成", () => openCommitDialog());
    if (logText) {
      logText.innerText += `[${getCurrentTime()}]保存完成
`;
    }

    const url = new URL(window.location.href);
    url.searchParams.set("branch", branchName);
    window.history.replaceState({}, "", url);

  } catch (error) {
    console.error("Error committing project:", error);
    showErrorAlert("提交作品出错", `错误: ${error.responseJSON?.message || error.statusText}`, "关闭");
    setButton("save-button", "保存", () => openCommitDialog());
  }
}


function saveProject({ force = false } = {}) {
  setButton("save-button", "保存中", () => openCommitDialog());
  uploadProjectAssets();
  if (force) {
    showSnackbar("强制保存");
    commitProject();
  }
  if (zcvm.runtime.isRunning) {
    zcvm.runtime.stopAll();
  }
  if (projectjson == zcvm.toJSON()) {
    showSnackbar("作品未修改");
    setButton("save-button", "保存", () => openCommitDialog());
    return;
  }
  if (String(projectinfo.author.id) !== String(userinfo.userid)) {
    showSnackbar("无权限");
    setButton("save-button", "无权限", () => openCommitDialog());
    return;
  }
  projectjson = zcvm.toJSON();
  commitProject();
  showSnackbar("保存完成");
  setButton("save-button", "保存完成", () => openCommitDialog());

  if (logText) {
    logText.innerText += `[${getCurrentTime()}]保存完成
`;
  }
}

function openBase64ImageInNewTab() {
  if (!zcvm) return;
  zcvm.renderer.requestSnapshot((dataURI) => {
    const imgWindow = window.open("", "_blank");
    imgWindow.document.write('<img src="' + dataURI + '"/>');
  });
}

async function setProjectThumbnail() {
  if (!zcvm) return;
  try {
    const dataURI = await new Promise(resolve => zcvm.renderer.requestSnapshot(resolve));
    const blob = await (await fetch(dataURI)).blob();
    const formData = new FormData();
    formData.append("file", blob, "thumbnail.png");

    const response = await TokenManager.apiRequest({
      url: `${ZCConfig.api.getPath("/scratch/thumbnail/")}${_pid}`,
      method: "POST",
      data: formData,
      processData: false,
      contentType: false,
    });

    if (response.status === "success") {
      showSnackbar("封面设置成功");
    } else {
      showSnackbar(`封面设置失败: ${response.message}`);
    }
  } catch (error) {
    console.error("Error setting project thumbnail:", error);
    showSnackbar(`封面设置失败: ${error.responseJSON?.message || error.statusText}`);
  }
}


buttons.push({
  id: "set-thumbnail-button",
  text: "舞台截图设为封面",
  onclick: () => setProjectThumbnail(),
});